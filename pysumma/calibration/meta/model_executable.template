#!$pythonPath
import os
import pysumma as ps
import pysumma.evaluation as pse
import shutil
import xarray as xr
import numpy as np
$importStrings

$functionStrings

$costFunctionCode

if __name__ == '__main__':
    # Template variables
    summa_exe = '$summaExe'
    file_manager = '$fileManager'
    obs_data_file = '$obsDataFile'
    sim_calib_vars = $simVarList
    obs_calib_vars = $obsVarList
    out_file = '$outFile'
    metrics_log = '$metricsLog'
    param_mapping_file = '$paramMappingFile'
    param_weight_file = '$paramWeightFile'
    param_file = '$paramFile'
    allow_failures = $allowFailures
    simulation_args = $simulationArgs
    conversion = $conversionFunc
    filter = $filterFunc
    cost_function = '$costFunction'.lower()
    maximize = $maximize

    metrics_mapping = {
       'kge': pse.kling_gupta_efficiency,
       'nse': pse.nash_sutcliffe_efficiency,
       'mae': pse.mean_absolute_error,
       'rmse': pse.root_mean_square_error,
       'mse': pse.mean_squared_error
    }
    if cost_function not in metrics_mapping:
        metrics_mapping[cost_function] = $costFunction
    # default metrics are used when model failure occurs
    default_metrics = {
        'kge': -9999.0,
        'nse': -9999.0,
        'mae': 9999.0,
        'mse': 99999.0,
        'rmse': 9999.0,
    }
    if cost_function not in default_metrics:
        if maximize:
            default_metrics[cost_function] = -9999.0
        else:
            default_metrics[cost_function] = 9999.0

    # read in parameters from ostrich files and summa setup
    with xr.open_dataset(param_file) as temp:
        trial_params = temp.load()

    param_dict = {}
    with open(param_weight_file) as weights:
        for line in weights:
            name, value = line.split('|')
            param_dict[name.strip()] = float(value.strip())
    # insert calibration parameters from ostrich
    for k, v in param_dict.items():
        trial_params[k] = xr.full_like(trial_params['hru'], fill_value=v, dtype=np.float64)
    trial_params.to_netcdf(param_file)

    # initialize simulation object
    s = ps.Simulation(summa_exe, file_manager, **simulation_args)
    if os.path.exists(out_file):
        os.remove(out_file)
    # run the simulation
    s.run('local')

    # error handling
    if s.status != 'Success':
        print(s.stdout)
        print('--------------------------------------------')
        print(s.stderr)
        if allow_failures:
            with open(out_file, 'w+') as f:
                for k, v in default_metrics.items():
                    f.write('%.6f'%v + f'\t #{k}\n')

            with open(metrics_log, 'a') as f:
                f.write(', '.join(['%.6f'%v for v in default_metrics.values()]) + '\n')

    assert s.status == 'Success'

    # open output and calculate diagnostics
    if type(s.output) == list:
        all_errs = []
        for out_ds in s.output:
            try:
                sim_ds = out_ds[sim_calib_vars].load()
            except KeyError as e:
                all_errs.append(e)
        if not sim_ds:
            raise Exception(all_errs)
    else:
        sim_ds = s.output.load()
    obs_ds = xr.open_dataset(obs_data_file).load()

    # trim sim and obs to common time length
    time_slice = pse.trim_time(sim_ds, obs_ds)
    sim_ds = sim_ds.sel(time=time_slice)
    obs_ds = obs_ds.sel(time=time_slice)
    sim_filt, obs_filt = filter(sim_ds,  obs_ds)

    metrics_dict = {}
    with open(out_file, 'w+') as f:
        for metric, metric_fun in metrics_mapping.items():
            metric_list = []
            for simvar, obsvar in zip(sim_calib_vars, obs_calib_vars):
                metric_list.append(metric_fun(
                    sim_filt[simvar], conversion(obs_filt[obsvar])))
            metric_val = np.mean(metric_list)
            # save diagnostics in form that ostrich can read
            f.write('%.6f'%metric_val + f'\t #{metric}\n')
            metrics_dict[metric] = metric_val

    with open(metrics_log, 'a') as f:
        f.write(', '.join(['%.6f'%v for v in metrics_dict.values()]) + '\n')
